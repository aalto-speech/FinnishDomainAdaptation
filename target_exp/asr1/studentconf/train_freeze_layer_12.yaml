#transfer learning arch
--enc-init: "exp/teachermodel/results/model.last10.avg.best"
--dec-init: "exp/teachermodel/results/model.last10.avg.best"
--enc-init-mods: "encoder.embed.,encoder.encoders.0.,encoder.encoders.1.,encoder.encoders.2.,encoder.encoders.3.,encoder.encoders.4.,encoder.encoders.5.,encoder.encoders.6.,encoder.encoders.7.,encoder.encoders.8.,encoder.encoders.9.,encoder.encoders.10.,encoder.encoders.11."
--dec-init-mods: "decoder.decoders."

#network architecture
#encoder related
elayers: 16
eunits: 2048
#decoder related
dlayers: 8
dunits: 2048
#attention related
adim: 256
aheads: 4

# hybrid CTC/attention
mtlalpha: 0.2

# label smoothing
lsm-weight: 0.1

# minibatch related
batch-size: 24
maxlen-in: 512  # if input length  > maxlen-in, batchsize is automatically reduced
maxlen-out: 150 # if output length > maxlen-out, batchsize is automatically reduced

# optimization related
sortagrad: 0 # Feed samples from shortest to longest ; -1: enabled for all epochs, 0: disabled, other: enabled for 'other' epochs
opt: noam
accum-grad: 2
grad-clip: 5
patience: 3
epochs: 100
dropout-rate: 0.1

# transformer specific setting
backend: pytorch
model-module: "espnet.nets.pytorch_backend.e2e_asr_transformer:E2E"
transformer-input-layer: conv2d     # encoder architecture type
transformer-lr: 10.0
transformer-warmup-steps: 25000
transformer-attn-dropout-rate: 0.0
transformer-length-normalized-loss: false
transformer-init: pytorch

# Report CER & WER
report-cer: true
report-wer: true
